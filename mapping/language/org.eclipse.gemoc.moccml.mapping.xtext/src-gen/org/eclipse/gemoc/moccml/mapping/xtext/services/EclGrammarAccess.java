/*
 * generated by Xtext
 */
package org.eclipse.gemoc.moccml.mapping.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.xtext.completeocl.services.CompleteOCLGrammarAccess;
import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;

@Singleton
public class EclGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MoCCMLMappingDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.MoCCMLMappingDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoCCMLMappingDocumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOwnedImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedImportsImportCSParserRuleCall_1_0 = (RuleCall)cOwnedImportsAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedPackagesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedPackagesPackageDeclarationCSParserRuleCall_3_0_0 = (RuleCall)cOwnedPackagesAssignment_3_0.eContents().get(0);
		private final Assignment cOwnedContextsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOwnedContextsContextDeclCSParserRuleCall_3_1_0 = (RuleCall)cOwnedContextsAssignment_3_1.eContents().get(0);
		
		////import  "http://org.eclipse.gemoc.moccml.mapping"  
		////import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation"  as CCSL
		//MoCCMLMappingDocument:
		//	{MoCCMLMappingDocument} ownedImports+=ImportCS*
		//	imports+=Import* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*;
		@Override public ParserRule getRule() { return rule; }

		//{MoCCMLMappingDocument} ownedImports+=ImportCS* imports+=Import* (ownedPackages+=PackageDeclarationCS |
		//ownedContexts+=ContextDeclCS)*
		public Group getGroup() { return cGroup; }

		//{MoCCMLMappingDocument}
		public Action getMoCCMLMappingDocumentAction_0() { return cMoCCMLMappingDocumentAction_0; }

		//ownedImports+=ImportCS*
		public Assignment getOwnedImportsAssignment_1() { return cOwnedImportsAssignment_1; }

		//ImportCS
		public RuleCall getOwnedImportsImportCSParserRuleCall_1_0() { return cOwnedImportsImportCSParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//(ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedPackages+=PackageDeclarationCS
		public Assignment getOwnedPackagesAssignment_3_0() { return cOwnedPackagesAssignment_3_0; }

		//PackageDeclarationCS
		public RuleCall getOwnedPackagesPackageDeclarationCSParserRuleCall_3_0_0() { return cOwnedPackagesPackageDeclarationCSParserRuleCall_3_0_0; }

		//ownedContexts+=ContextDeclCS
		public Assignment getOwnedContextsAssignment_3_1() { return cOwnedContextsAssignment_3_1; }

		//ContextDeclCS
		public RuleCall getOwnedContextsContextDeclCSParserRuleCall_3_1_0() { return cOwnedContextsContextDeclCSParserRuleCall_3_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cECLimportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIDOUBLE_QUOTED_STRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import ImportStatement:
		//	"ECLimport" importURI=DOUBLE_QUOTED_STRING;
		@Override public ParserRule getRule() { return rule; }

		//"ECLimport" importURI=DOUBLE_QUOTED_STRING
		public Group getGroup() { return cGroup; }

		//"ECLimport"
		public Keyword getECLimportKeyword_0() { return cECLimportKeyword_0; }

		//importURI=DOUBLE_QUOTED_STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//DOUBLE_QUOTED_STRING
		public RuleCall getImportURIDOUBLE_QUOTED_STRINGTerminalRuleCall_1_0() { return cImportURIDOUBLE_QUOTED_STRINGTerminalRuleCall_1_0; }
	}

	public class TypeExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.TypeExpCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cTypeNameExpCSParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypeLiteralCSParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cCollectionPatternCSParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cEventTypeParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cBlockTypeParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cTimebaseParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Assignment cOwnedMultiplicityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedMultiplicityMultiplicityCSParserRuleCall_1_0 = (RuleCall)cOwnedMultiplicityAssignment_1.eContents().get(0);
		
		//@Override
		//TypeExpCS baseCST::TypedRefCS:
		//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS | EventType | BlockType | Timebase)
		//	ownedMultiplicity=MultiplicityCS?;
		@Override public ParserRule getRule() { return rule; }

		//(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS | EventType | BlockType | Timebase)
		//ownedMultiplicity=MultiplicityCS?
		public Group getGroup() { return cGroup; }

		//(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS | EventType | BlockType | Timebase)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//TypeNameExpCS
		public RuleCall getTypeNameExpCSParserRuleCall_0_0() { return cTypeNameExpCSParserRuleCall_0_0; }

		//TypeLiteralCS
		public RuleCall getTypeLiteralCSParserRuleCall_0_1() { return cTypeLiteralCSParserRuleCall_0_1; }

		//CollectionPatternCS
		public RuleCall getCollectionPatternCSParserRuleCall_0_2() { return cCollectionPatternCSParserRuleCall_0_2; }

		//EventType
		public RuleCall getEventTypeParserRuleCall_0_3() { return cEventTypeParserRuleCall_0_3; }

		//BlockType
		public RuleCall getBlockTypeParserRuleCall_0_4() { return cBlockTypeParserRuleCall_0_4; }

		//Timebase
		public RuleCall getTimebaseParserRuleCall_0_5() { return cTimebaseParserRuleCall_0_5; }

		//ownedMultiplicity=MultiplicityCS?
		public Assignment getOwnedMultiplicityAssignment_1() { return cOwnedMultiplicityAssignment_1; }

		//MultiplicityCS
		public RuleCall getOwnedMultiplicityMultiplicityCSParserRuleCall_1_0() { return cOwnedMultiplicityMultiplicityCSParserRuleCall_1_0; }
	}

	public class EventTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.EventType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReferedElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReferedElementEventKindEnumRuleCall_2_1_0 = (RuleCall)cReferedElementAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//EventType:
		//	{EventType}
		//	'Event' ('(' referedElement=EventKind ')')?;
		@Override public ParserRule getRule() { return rule; }

		//{EventType} 'Event' ('(' referedElement=EventKind ')')?
		public Group getGroup() { return cGroup; }

		//{EventType}
		public Action getEventTypeAction_0() { return cEventTypeAction_0; }

		//'Event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//('(' referedElement=EventKind ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//referedElement=EventKind
		public Assignment getReferedElementAssignment_2_1() { return cReferedElementAssignment_2_1; }

		//EventKind
		public RuleCall getReferedElementEventKindEnumRuleCall_2_1_0() { return cReferedElementEventKindEnumRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class TimebaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.Timebase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoCCMLMappingTimeBaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeBaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeBaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTimeBaseDenseClockTypeCrossReference_2_1_0 = (CrossReference)cTimeBaseAssignment_2_1.eContents().get(0);
		private final RuleCall cTimeBaseDenseClockTypeIDParserRuleCall_2_1_0_1 = (RuleCall)cTimeBaseDenseClockTypeCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Timebase MoCCMLMappingTimeBase:
		//	{MoCCMLMappingTimeBase}
		//	'TimeBase' ('[' timeBase=[CCSLBasicTypes::DenseClockType] ']')?;
		@Override public ParserRule getRule() { return rule; }

		//{MoCCMLMappingTimeBase} 'TimeBase' ('[' timeBase=[CCSLBasicTypes::DenseClockType] ']')?
		public Group getGroup() { return cGroup; }

		//{MoCCMLMappingTimeBase}
		public Action getMoCCMLMappingTimeBaseAction_0() { return cMoCCMLMappingTimeBaseAction_0; }

		//'TimeBase'
		public Keyword getTimeBaseKeyword_1() { return cTimeBaseKeyword_1; }

		//('[' timeBase=[CCSLBasicTypes::DenseClockType] ']')?
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//timeBase=[CCSLBasicTypes::DenseClockType]
		public Assignment getTimeBaseAssignment_2_1() { return cTimeBaseAssignment_2_1; }

		//[CCSLBasicTypes::DenseClockType]
		public CrossReference getTimeBaseDenseClockTypeCrossReference_2_1_0() { return cTimeBaseDenseClockTypeCrossReference_2_1_0; }

		//ID
		public RuleCall getTimeBaseDenseClockTypeIDParserRuleCall_2_1_0_1() { return cTimeBaseDenseClockTypeIDParserRuleCall_2_1_0_1; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}

	public class BlockTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.BlockType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBlockKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BlockType:
		//	{BlockType}
		//	'Block';
		@Override public ParserRule getRule() { return rule; }

		//{BlockType} 'Block'
		public Group getGroup() { return cGroup; }

		//{BlockType}
		public Action getBlockTypeAction_0() { return cBlockTypeAction_0; }

		//'Block'
		public Keyword getBlockKeyword_1() { return cBlockKeyword_1; }
	}

	public class ExpCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.ExpCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoCCMLRelationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoCCMLExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoCCMLMappingPriorityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cPrefixedPrimaryExpCSParserRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Action cInfixExpCSOwnedLeftAction_3_0_1_0 = (Action)cGroup_3_0_1.eContents().get(0);
		private final Assignment cNameAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cNameBinaryOperatorNameParserRuleCall_3_0_1_1_0 = (RuleCall)cNameAssignment_3_0_1_1.eContents().get(0);
		private final Assignment cOwnedRightAssignment_3_0_1_2 = (Assignment)cGroup_3_0_1.eContents().get(2);
		private final RuleCall cOwnedRightExpCSParserRuleCall_3_0_1_2_0 = (RuleCall)cOwnedRightAssignment_3_0_1_2.eContents().get(0);
		private final RuleCall cPrefixedLetExpCSParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//@Override
		//ExpCS essentialOCLCST::ExpCS:
		//	MoCCMLRelation | MoCCMLExpression | MoCCMLMappingPriority | (PrefixedPrimaryExpCS
		//	({essentialOCLCST::InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS);
		@Override public ParserRule getRule() { return rule; }

		////	({InfixExpCS} ownedSource=PrefixedExpCS name=BinaryOperatorName ownedArgument=ExpCS)
		////| 	PrefixedExpCS
		//// the above takes exponential or worse time for backtracking, below is fast
		//MoCCMLRelation | MoCCMLExpression | MoCCMLMappingPriority | (PrefixedPrimaryExpCS
		//({essentialOCLCST::InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS)
		public Alternatives getAlternatives() { return cAlternatives; }

		////	({InfixExpCS} ownedSource=PrefixedExpCS name=BinaryOperatorName ownedArgument=ExpCS)
		////| 	PrefixedExpCS
		//// the above takes exponential or worse time for backtracking, below is fast
		//MoCCMLRelation
		public RuleCall getMoCCMLRelationParserRuleCall_0() { return cMoCCMLRelationParserRuleCall_0; }

		//MoCCMLExpression
		public RuleCall getMoCCMLExpressionParserRuleCall_1() { return cMoCCMLExpressionParserRuleCall_1; }

		//MoCCMLMappingPriority
		public RuleCall getMoCCMLMappingPriorityParserRuleCall_2() { return cMoCCMLMappingPriorityParserRuleCall_2; }

		//(PrefixedPrimaryExpCS ({essentialOCLCST::InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? |
		//PrefixedLetExpCS)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//PrefixedPrimaryExpCS ({essentialOCLCST::InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//PrefixedPrimaryExpCS
		public RuleCall getPrefixedPrimaryExpCSParserRuleCall_3_0_0() { return cPrefixedPrimaryExpCSParserRuleCall_3_0_0; }

		//({essentialOCLCST::InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//{essentialOCLCST::InfixExpCS.ownedLeft=current}
		public Action getInfixExpCSOwnedLeftAction_3_0_1_0() { return cInfixExpCSOwnedLeftAction_3_0_1_0; }

		//name=BinaryOperatorName
		public Assignment getNameAssignment_3_0_1_1() { return cNameAssignment_3_0_1_1; }

		//BinaryOperatorName
		public RuleCall getNameBinaryOperatorNameParserRuleCall_3_0_1_1_0() { return cNameBinaryOperatorNameParserRuleCall_3_0_1_1_0; }

		//ownedRight=ExpCS
		public Assignment getOwnedRightAssignment_3_0_1_2() { return cOwnedRightAssignment_3_0_1_2; }

		//ExpCS
		public RuleCall getOwnedRightExpCSParserRuleCall_3_0_1_2_0() { return cOwnedRightExpCSParserRuleCall_3_0_1_2_0; }

		//PrefixedLetExpCS
		public RuleCall getPrefixedLetExpCSParserRuleCall_3_1() { return cPrefixedLetExpCSParserRuleCall_3_1; }
	}

	public class MoCCMLMappingPriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.MoCCMLMappingPriority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoCCMLMappingPriorityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPriorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHigherAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHigherExpCSParserRuleCall_3_0 = (RuleCall)cHigherAssignment_3.eContents().get(0);
		private final Keyword cPrevailsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cOnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLowerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLowerExpCSParserRuleCall_6_0 = (RuleCall)cLowerAssignment_6.eContents().get(0);
		
		//MoCCMLMappingPriority:
		//	{MoCCMLMappingPriority}
		//	'Prior' ':' higher=ExpCS 'prevails' 'on' lower=ExpCS;
		@Override public ParserRule getRule() { return rule; }

		//{MoCCMLMappingPriority} 'Prior' ':' higher=ExpCS 'prevails' 'on' lower=ExpCS
		public Group getGroup() { return cGroup; }

		//{MoCCMLMappingPriority}
		public Action getMoCCMLMappingPriorityAction_0() { return cMoCCMLMappingPriorityAction_0; }

		//'Prior'
		public Keyword getPriorKeyword_1() { return cPriorKeyword_1; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//higher=ExpCS
		public Assignment getHigherAssignment_3() { return cHigherAssignment_3; }

		//ExpCS
		public RuleCall getHigherExpCSParserRuleCall_3_0() { return cHigherExpCSParserRuleCall_3_0; }

		//'prevails'
		public Keyword getPrevailsKeyword_4() { return cPrevailsKeyword_4; }

		//'on'
		public Keyword getOnKeyword_5() { return cOnKeyword_5; }

		//lower=ExpCS
		public Assignment getLowerAssignment_6() { return cLowerAssignment_6; }

		//ExpCS
		public RuleCall getLowerExpCSParserRuleCall_6_0() { return cLowerExpCSParserRuleCall_6_0; }
	}

	public class DefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.DefCS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefOperationCSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefPropertyCSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoCCMLMappingEventDefCSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMoCCMLMappingBlockDefCSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//@Override
		//DefCS completeOCL::DefCS:
		//	DefOperationCS | DefPropertyCS | MoCCMLMappingEventDefCS | MoCCMLMappingBlockDefCS;
		@Override public ParserRule getRule() { return rule; }

		//DefOperationCS | DefPropertyCS | MoCCMLMappingEventDefCS | MoCCMLMappingBlockDefCS
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefOperationCS
		public RuleCall getDefOperationCSParserRuleCall_0() { return cDefOperationCSParserRuleCall_0; }

		//DefPropertyCS
		public RuleCall getDefPropertyCSParserRuleCall_1() { return cDefPropertyCSParserRuleCall_1; }

		//MoCCMLMappingEventDefCS
		public RuleCall getMoCCMLMappingEventDefCSParserRuleCall_2() { return cMoCCMLMappingEventDefCSParserRuleCall_2; }

		//MoCCMLMappingBlockDefCS
		public RuleCall getMoCCMLMappingBlockDefCSParserRuleCall_3() { return cMoCCMLMappingBlockDefCSParserRuleCall_3; }
	}

	public class MoCCMLMappingBlockDefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.MoCCMLMappingBlockDefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cBlockDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpCSParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOwnedTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_6_0 = (RuleCall)cOwnedTypeAssignment_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOwnedSpecificationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOwnedSpecificationSpecificationCSParserRuleCall_8_0 = (RuleCall)cOwnedSpecificationAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cEnterKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cWhenKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cEnterWhenAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cEnterWhenExpCSParserRuleCall_9_2_0 = (RuleCall)cEnterWhenAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cLeaveKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cWhenKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cLeaveWhenAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cLeaveWhenExpCSParserRuleCall_10_2_0 = (RuleCall)cLeaveWhenAssignment_10_2.eContents().get(0);
		
		//MoCCMLMappingBlockDefCS:
		//	visibility=Visibility? 'blockDef' ('if' condition=ExpCS)? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
		//	'=' ownedSpecification=SpecificationCS ("enter" "when" enterWhen=ExpCS)? ("leave" "when" leaveWhen=ExpCS)?;
		@Override public ParserRule getRule() { return rule; }

		//visibility=Visibility? 'blockDef' ('if' condition=ExpCS)? ':' name=UnrestrictedName ':' ownedType=TypeExpCS '='
		//ownedSpecification=SpecificationCS ("enter" "when" enterWhen=ExpCS)? ("leave" "when" leaveWhen=ExpCS)?
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//'blockDef'
		public Keyword getBlockDefKeyword_1() { return cBlockDefKeyword_1; }

		//('if' condition=ExpCS)?
		public Group getGroup_2() { return cGroup_2; }

		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//condition=ExpCS
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//ExpCS
		public RuleCall getConditionExpCSParserRuleCall_2_1_0() { return cConditionExpCSParserRuleCall_2_1_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_4_0() { return cNameUnrestrictedNameParserRuleCall_4_0; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_6() { return cOwnedTypeAssignment_6; }

		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_6_0() { return cOwnedTypeTypeExpCSParserRuleCall_6_0; }

		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//ownedSpecification=SpecificationCS
		public Assignment getOwnedSpecificationAssignment_8() { return cOwnedSpecificationAssignment_8; }

		//SpecificationCS
		public RuleCall getOwnedSpecificationSpecificationCSParserRuleCall_8_0() { return cOwnedSpecificationSpecificationCSParserRuleCall_8_0; }

		//("enter" "when" enterWhen=ExpCS)?
		public Group getGroup_9() { return cGroup_9; }

		//"enter"
		public Keyword getEnterKeyword_9_0() { return cEnterKeyword_9_0; }

		//"when"
		public Keyword getWhenKeyword_9_1() { return cWhenKeyword_9_1; }

		//enterWhen=ExpCS
		public Assignment getEnterWhenAssignment_9_2() { return cEnterWhenAssignment_9_2; }

		//ExpCS
		public RuleCall getEnterWhenExpCSParserRuleCall_9_2_0() { return cEnterWhenExpCSParserRuleCall_9_2_0; }

		//("leave" "when" leaveWhen=ExpCS)?
		public Group getGroup_10() { return cGroup_10; }

		//"leave"
		public Keyword getLeaveKeyword_10_0() { return cLeaveKeyword_10_0; }

		//"when"
		public Keyword getWhenKeyword_10_1() { return cWhenKeyword_10_1; }

		//leaveWhen=ExpCS
		public Assignment getLeaveWhenAssignment_10_2() { return cLeaveWhenAssignment_10_2; }

		//ExpCS
		public RuleCall getLeaveWhenExpCSParserRuleCall_10_2_0() { return cLeaveWhenExpCSParserRuleCall_10_2_0; }
	}

	public class MoCCMLMappingEventDefCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.MoCCMLMappingEventDefCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpCSParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameUnrestrictedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOwnedTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOwnedTypeTypeExpCSParserRuleCall_6_0 = (RuleCall)cOwnedTypeAssignment_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOwnedSpecificationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOwnedSpecificationSpecificationCSParserRuleCall_8_0 = (RuleCall)cOwnedSpecificationAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Group cGroup_9_0 = (Group)cGroup_9.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_9_0_0 = (Keyword)cGroup_9_0.eContents().get(0);
		private final Assignment cDsaResultNameAssignment_9_0_1 = (Assignment)cGroup_9_0.eContents().get(1);
		private final RuleCall cDsaResultNameUnrestrictedNameParserRuleCall_9_0_1_0 = (RuleCall)cDsaResultNameAssignment_9_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9_0_2 = (Keyword)cGroup_9_0.eContents().get(2);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cFutureKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1_1 = (Keyword)cGroup_9_1.eContents().get(1);
		private final Assignment cFutureAssignment_9_1_2 = (Assignment)cGroup_9_1.eContents().get(2);
		private final RuleCall cFutureExpCSParserRuleCall_9_1_2_0 = (RuleCall)cFutureAssignment_9_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_1_3 = (Keyword)cGroup_9_1.eContents().get(3);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cSwitchKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cFeedbackAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cFeedbackDSAFeedBackRuleParserRuleCall_9_2_1_0 = (RuleCall)cFeedbackAssignment_9_2_1.eContents().get(0);
		
		//MoCCMLMappingEventDefCS:
		//	visibility=Visibility? 'def' ('if' condition=ExpCS)? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
		//	'=' ownedSpecification=SpecificationCS (('[' dsaResultName=UnrestrictedName ']')? ("future" "(" future=ExpCS ")")?
		//	("switch" feedback=DSAFeedBackRule)?);
		@Override public ParserRule getRule() { return rule; }

		//visibility=Visibility? 'def' ('if' condition=ExpCS)? ':' name=UnrestrictedName ':' ownedType=TypeExpCS '='
		//ownedSpecification=SpecificationCS (('[' dsaResultName=UnrestrictedName ']')? ("future" "(" future=ExpCS ")")?
		//("switch" feedback=DSAFeedBackRule)?)
		public Group getGroup() { return cGroup; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }

		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }

		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }

		//('if' condition=ExpCS)?
		public Group getGroup_2() { return cGroup_2; }

		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//condition=ExpCS
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//ExpCS
		public RuleCall getConditionExpCSParserRuleCall_2_1_0() { return cConditionExpCSParserRuleCall_2_1_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//name=UnrestrictedName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//UnrestrictedName
		public RuleCall getNameUnrestrictedNameParserRuleCall_4_0() { return cNameUnrestrictedNameParserRuleCall_4_0; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//ownedType=TypeExpCS
		public Assignment getOwnedTypeAssignment_6() { return cOwnedTypeAssignment_6; }

		//TypeExpCS
		public RuleCall getOwnedTypeTypeExpCSParserRuleCall_6_0() { return cOwnedTypeTypeExpCSParserRuleCall_6_0; }

		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//ownedSpecification=SpecificationCS
		public Assignment getOwnedSpecificationAssignment_8() { return cOwnedSpecificationAssignment_8; }

		//SpecificationCS
		public RuleCall getOwnedSpecificationSpecificationCSParserRuleCall_8_0() { return cOwnedSpecificationSpecificationCSParserRuleCall_8_0; }

		//(('[' dsaResultName=UnrestrictedName ']')? ("future" "(" future=ExpCS ")")? ("switch" feedback=DSAFeedBackRule)?)
		public Group getGroup_9() { return cGroup_9; }

		//('[' dsaResultName=UnrestrictedName ']')?
		public Group getGroup_9_0() { return cGroup_9_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_9_0_0() { return cLeftSquareBracketKeyword_9_0_0; }

		//dsaResultName=UnrestrictedName
		public Assignment getDsaResultNameAssignment_9_0_1() { return cDsaResultNameAssignment_9_0_1; }

		//UnrestrictedName
		public RuleCall getDsaResultNameUnrestrictedNameParserRuleCall_9_0_1_0() { return cDsaResultNameUnrestrictedNameParserRuleCall_9_0_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_9_0_2() { return cRightSquareBracketKeyword_9_0_2; }

		//("future" "(" future=ExpCS ")")?
		public Group getGroup_9_1() { return cGroup_9_1; }

		//"future"
		public Keyword getFutureKeyword_9_1_0() { return cFutureKeyword_9_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1_1() { return cLeftParenthesisKeyword_9_1_1; }

		//future=ExpCS
		public Assignment getFutureAssignment_9_1_2() { return cFutureAssignment_9_1_2; }

		//ExpCS
		public RuleCall getFutureExpCSParserRuleCall_9_1_2_0() { return cFutureExpCSParserRuleCall_9_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_1_3() { return cRightParenthesisKeyword_9_1_3; }

		//("switch" feedback=DSAFeedBackRule)?
		public Group getGroup_9_2() { return cGroup_9_2; }

		//"switch"
		public Keyword getSwitchKeyword_9_2_0() { return cSwitchKeyword_9_2_0; }

		//feedback=DSAFeedBackRule
		public Assignment getFeedbackAssignment_9_2_1() { return cFeedbackAssignment_9_2_1; }

		//DSAFeedBackRule
		public RuleCall getFeedbackDSAFeedBackRuleParserRuleCall_9_2_1_0() { return cFeedbackDSAFeedBackRuleParserRuleCall_9_2_1_0; }
	}

	public class DSAFeedBackRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.DSAFeedBackRule");
		private final Assignment cCasesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCasesCasesRuleParserRuleCall_0 = (RuleCall)cCasesAssignment.eContents().get(0);
		
		//DSAFeedBackRule DSAFeedback:
		//	cases+=CasesRule+;
		@Override public ParserRule getRule() { return rule; }

		//cases+=CasesRule+
		public Assignment getCasesAssignment() { return cCasesAssignment; }

		//CasesRule
		public RuleCall getCasesCasesRuleParserRuleCall_0() { return cCasesCasesRuleParserRuleCall_0; }
	}

	public class CasesRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.CasesRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpCSParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cKindOfFeedbackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindOfFeedbackFeedBackKindEnumRuleCall_2_0 = (RuleCall)cKindOfFeedbackAssignment_2.eContents().get(0);
		private final Assignment cEventToForceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventToForceExpCSParserRuleCall_3_0 = (RuleCall)cEventToForceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cUntilKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cWhenKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cOnKeyword_4_0_2 = (Keyword)cAlternatives_4_0.eContents().get(2);
		private final Assignment cOnAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOnExpCSParserRuleCall_4_1_0 = (RuleCall)cOnAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CasesRule Case:
		//	'case' condition=ExpCS kindOfFeedback=FeedBackKind eventToForce=ExpCS (('until' | 'when' | 'on') on=ExpCS)? ';';
		@Override public ParserRule getRule() { return rule; }

		//'case' condition=ExpCS kindOfFeedback=FeedBackKind eventToForce=ExpCS (('until' | 'when' | 'on') on=ExpCS)? ';'
		public Group getGroup() { return cGroup; }

		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//condition=ExpCS
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//ExpCS
		public RuleCall getConditionExpCSParserRuleCall_1_0() { return cConditionExpCSParserRuleCall_1_0; }

		//kindOfFeedback=FeedBackKind
		public Assignment getKindOfFeedbackAssignment_2() { return cKindOfFeedbackAssignment_2; }

		//FeedBackKind
		public RuleCall getKindOfFeedbackFeedBackKindEnumRuleCall_2_0() { return cKindOfFeedbackFeedBackKindEnumRuleCall_2_0; }

		//eventToForce=ExpCS
		public Assignment getEventToForceAssignment_3() { return cEventToForceAssignment_3; }

		//ExpCS
		public RuleCall getEventToForceExpCSParserRuleCall_3_0() { return cEventToForceExpCSParserRuleCall_3_0; }

		//(('until' | 'when' | 'on') on=ExpCS)?
		public Group getGroup_4() { return cGroup_4; }

		//('until' | 'when' | 'on')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//'until'
		public Keyword getUntilKeyword_4_0_0() { return cUntilKeyword_4_0_0; }

		//'when'
		public Keyword getWhenKeyword_4_0_1() { return cWhenKeyword_4_0_1; }

		//'on'
		public Keyword getOnKeyword_4_0_2() { return cOnKeyword_4_0_2; }

		//on=ExpCS
		public Assignment getOnAssignment_4_1() { return cOnAssignment_4_1; }

		//ExpCS
		public RuleCall getOnExpCSParserRuleCall_4_1_0() { return cOnExpCSParserRuleCall_4_1_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class MoCCMLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.MoCCMLExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoCCMLExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpressionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeExpressionDeclarationCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeExpressionDeclarationIDParserRuleCall_2_0_1 = (RuleCall)cTypeExpressionDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersExpCSParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersExpCSParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MoCCMLExpression:
		//	{MoCCMLExpression}
		//	//we need to add a keyWord to make the EclScopeProvider working :-/
		//	"Expression" type=[CCSL::ExpressionDeclaration] '(' parameters+=ExpCS (',' parameters+=ExpCS)* ')';
		@Override public ParserRule getRule() { return rule; }

		//{MoCCMLExpression} //we need to add a keyWord to make the EclScopeProvider working :-/
		//"Expression" type=[CCSL::ExpressionDeclaration] '(' parameters+=ExpCS (',' parameters+=ExpCS)* ')'
		public Group getGroup() { return cGroup; }

		//{MoCCMLExpression}
		public Action getMoCCMLExpressionAction_0() { return cMoCCMLExpressionAction_0; }

		////we need to add a keyWord to make the EclScopeProvider working :-/
		//"Expression"
		public Keyword getExpressionKeyword_1() { return cExpressionKeyword_1; }

		//type=[CCSL::ExpressionDeclaration]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[CCSL::ExpressionDeclaration]
		public CrossReference getTypeExpressionDeclarationCrossReference_2_0() { return cTypeExpressionDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getTypeExpressionDeclarationIDParserRuleCall_2_0_1() { return cTypeExpressionDeclarationIDParserRuleCall_2_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameters+=ExpCS
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//ExpCS
		public RuleCall getParametersExpCSParserRuleCall_4_0() { return cParametersExpCSParserRuleCall_4_0; }

		//(',' parameters+=ExpCS)*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//parameters+=ExpCS
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//ExpCS
		public RuleCall getParametersExpCSParserRuleCall_5_1_0() { return cParametersExpCSParserRuleCall_5_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class MoCCMLRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.MoCCMLRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoCCMLRelationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeRelationDeclarationCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeRelationDeclarationIDParserRuleCall_2_0_1 = (RuleCall)cTypeRelationDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersExpCSParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersExpCSParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MoCCMLRelation:
		//	{MoCCMLRelation}
		//	//we need to add a keyWord to make the EclScopeProvider working :-/
		//	"Relation" type=[CCSL::RelationDeclaration] '(' parameters+=ExpCS (',' parameters+=ExpCS)* ')';
		@Override public ParserRule getRule() { return rule; }

		//{MoCCMLRelation} //we need to add a keyWord to make the EclScopeProvider working :-/
		//"Relation" type=[CCSL::RelationDeclaration] '(' parameters+=ExpCS (',' parameters+=ExpCS)* ')'
		public Group getGroup() { return cGroup; }

		//{MoCCMLRelation}
		public Action getMoCCMLRelationAction_0() { return cMoCCMLRelationAction_0; }

		////we need to add a keyWord to make the EclScopeProvider working :-/
		//"Relation"
		public Keyword getRelationKeyword_1() { return cRelationKeyword_1; }

		//type=[CCSL::RelationDeclaration]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[CCSL::RelationDeclaration]
		public CrossReference getTypeRelationDeclarationCrossReference_2_0() { return cTypeRelationDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getTypeRelationDeclarationIDParserRuleCall_2_0_1() { return cTypeRelationDeclarationIDParserRuleCall_2_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameters+=ExpCS
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//ExpCS
		public RuleCall getParametersExpCSParserRuleCall_4_0() { return cParametersExpCSParserRuleCall_4_0; }

		//(',' parameters+=ExpCS)*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//parameters+=ExpCS
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }

		//ExpCS
		public RuleCall getParametersExpCSParserRuleCall_5_1_0() { return cParametersExpCSParserRuleCall_5_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	
	
	public class EventKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.EventKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartStartEventKeyword_0_0 = (Keyword)cStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFinishEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFinishStopEventKeyword_1_0 = (Keyword)cFinishEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFinishEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFinishFinishEventKeyword_2_0 = (Keyword)cFinishEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cConsumeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cConsumeConsumeEventKeyword_3_0 = (Keyword)cConsumeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cProduceEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cProduceProduceEventKeyword_4_0 = (Keyword)cProduceEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cReceiveEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cReceiveReceiveEventKeyword_5_0 = (Keyword)cReceiveEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSendEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSendSendEventKeyword_6_0 = (Keyword)cSendEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCreateCreateEventKeyword_7_0 = (Keyword)cCreateEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDestroyEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDestroyDestroyEventKeyword_8_0 = (Keyword)cDestroyEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSuspendEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSuspendSuspendEventKeyword_9_0 = (Keyword)cSuspendEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cResumeEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cResumeResumeEventKeyword_10_0 = (Keyword)cResumeEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cUndefinedDSEKeyword_11_0 = (Keyword)cUndefinedEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cUndefinedInternalMoCCEventKeyword_12_0 = (Keyword)cUndefinedEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cUndefinedAnyKeyword_13_0 = (Keyword)cUndefinedEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cUndefinedGenericEventKeyword_14_0 = (Keyword)cUndefinedEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cUndefinedEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cUndefinedExecuteEventKeyword_15_0 = (Keyword)cUndefinedEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cCallEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cCallCallEventKeyword_16_0 = (Keyword)cCallEnumLiteralDeclaration_16.eContents().get(0);
		
		//enum EventKind:
		//	start='StartEvent' | // start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
		//	finish='StopEvent' | //finish= 'stop Event' | finish= 'stopEvent' |finish= 'Stop Event' |
		//	finish='FinishEvent' | //| finish= 'finish Event' | finish= 'finishEvent' | finish= 'Finish Event' |
		//	consume="ConsumeEvent" |
		//	produce="produceEvent" |
		//	receive="receiveEvent" |
		//	send="sendEvent" |
		//	create="CreateEvent" |
		//	destroy="DestroyEvent" |
		//	suspend="SuspendEvent" |
		//	resume="ResumeEvent" |
		//	undefined="DSE" | undefined="internalMoCCEvent" | undefined="any" | undefined="GenericEvent" |
		//	undefined="ExecuteEvent" |
		//	call="CallEvent";
		public EnumRule getRule() { return rule; }

		//start='StartEvent' | // start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
		//finish='StopEvent' | //finish= 'stop Event' | finish= 'stopEvent' |finish= 'Stop Event' |
		//finish='FinishEvent' | //| finish= 'finish Event' | finish= 'finishEvent' | finish= 'Finish Event' |
		//consume="ConsumeEvent" | produce="produceEvent" | receive="receiveEvent" | send="sendEvent" | create="CreateEvent" |
		//destroy="DestroyEvent" | suspend="SuspendEvent" | resume="ResumeEvent" | undefined="DSE" |
		//undefined="internalMoCCEvent" | undefined="any" | undefined="GenericEvent" | undefined="ExecuteEvent" |
		//call="CallEvent"
		public Alternatives getAlternatives() { return cAlternatives; }

		//start='StartEvent'
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_0() { return cStartEnumLiteralDeclaration_0; }

		//'StartEvent'
		public Keyword getStartStartEventKeyword_0_0() { return cStartStartEventKeyword_0_0; }

		//// start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
		//finish='StopEvent'
		public EnumLiteralDeclaration getFinishEnumLiteralDeclaration_1() { return cFinishEnumLiteralDeclaration_1; }

		//'StopEvent'
		public Keyword getFinishStopEventKeyword_1_0() { return cFinishStopEventKeyword_1_0; }

		////finish= 'stop Event' | finish= 'stopEvent' |finish= 'Stop Event' |
		//finish='FinishEvent'
		public EnumLiteralDeclaration getFinishEnumLiteralDeclaration_2() { return cFinishEnumLiteralDeclaration_2; }

		//'FinishEvent'
		public Keyword getFinishFinishEventKeyword_2_0() { return cFinishFinishEventKeyword_2_0; }

		////| finish= 'finish Event' | finish= 'finishEvent' | finish= 'Finish Event' |
		//consume="ConsumeEvent"
		public EnumLiteralDeclaration getConsumeEnumLiteralDeclaration_3() { return cConsumeEnumLiteralDeclaration_3; }

		//"ConsumeEvent"
		public Keyword getConsumeConsumeEventKeyword_3_0() { return cConsumeConsumeEventKeyword_3_0; }

		//produce="produceEvent"
		public EnumLiteralDeclaration getProduceEnumLiteralDeclaration_4() { return cProduceEnumLiteralDeclaration_4; }

		//"produceEvent"
		public Keyword getProduceProduceEventKeyword_4_0() { return cProduceProduceEventKeyword_4_0; }

		//receive="receiveEvent"
		public EnumLiteralDeclaration getReceiveEnumLiteralDeclaration_5() { return cReceiveEnumLiteralDeclaration_5; }

		//"receiveEvent"
		public Keyword getReceiveReceiveEventKeyword_5_0() { return cReceiveReceiveEventKeyword_5_0; }

		//send="sendEvent"
		public EnumLiteralDeclaration getSendEnumLiteralDeclaration_6() { return cSendEnumLiteralDeclaration_6; }

		//"sendEvent"
		public Keyword getSendSendEventKeyword_6_0() { return cSendSendEventKeyword_6_0; }

		//create="CreateEvent"
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_7() { return cCreateEnumLiteralDeclaration_7; }

		//"CreateEvent"
		public Keyword getCreateCreateEventKeyword_7_0() { return cCreateCreateEventKeyword_7_0; }

		//destroy="DestroyEvent"
		public EnumLiteralDeclaration getDestroyEnumLiteralDeclaration_8() { return cDestroyEnumLiteralDeclaration_8; }

		//"DestroyEvent"
		public Keyword getDestroyDestroyEventKeyword_8_0() { return cDestroyDestroyEventKeyword_8_0; }

		//suspend="SuspendEvent"
		public EnumLiteralDeclaration getSuspendEnumLiteralDeclaration_9() { return cSuspendEnumLiteralDeclaration_9; }

		//"SuspendEvent"
		public Keyword getSuspendSuspendEventKeyword_9_0() { return cSuspendSuspendEventKeyword_9_0; }

		//resume="ResumeEvent"
		public EnumLiteralDeclaration getResumeEnumLiteralDeclaration_10() { return cResumeEnumLiteralDeclaration_10; }

		//"ResumeEvent"
		public Keyword getResumeResumeEventKeyword_10_0() { return cResumeResumeEventKeyword_10_0; }

		//undefined="DSE"
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_11() { return cUndefinedEnumLiteralDeclaration_11; }

		//"DSE"
		public Keyword getUndefinedDSEKeyword_11_0() { return cUndefinedDSEKeyword_11_0; }

		//undefined="internalMoCCEvent"
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_12() { return cUndefinedEnumLiteralDeclaration_12; }

		//"internalMoCCEvent"
		public Keyword getUndefinedInternalMoCCEventKeyword_12_0() { return cUndefinedInternalMoCCEventKeyword_12_0; }

		//undefined="any"
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_13() { return cUndefinedEnumLiteralDeclaration_13; }

		//"any"
		public Keyword getUndefinedAnyKeyword_13_0() { return cUndefinedAnyKeyword_13_0; }

		//undefined="GenericEvent"
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_14() { return cUndefinedEnumLiteralDeclaration_14; }

		//"GenericEvent"
		public Keyword getUndefinedGenericEventKeyword_14_0() { return cUndefinedGenericEventKeyword_14_0; }

		//undefined="ExecuteEvent"
		public EnumLiteralDeclaration getUndefinedEnumLiteralDeclaration_15() { return cUndefinedEnumLiteralDeclaration_15; }

		//"ExecuteEvent"
		public Keyword getUndefinedExecuteEventKeyword_15_0() { return cUndefinedExecuteEventKeyword_15_0; }

		//call="CallEvent"
		public EnumLiteralDeclaration getCallEnumLiteralDeclaration_16() { return cCallEnumLiteralDeclaration_16; }

		//"CallEvent"
		public Keyword getCallCallEventKeyword_16_0() { return cCallCallEventKeyword_16_0; }
	}

	public class VisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//	public |
		//	private;
		public EnumRule getRule() { return rule; }

		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }

		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }

		//'public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }

		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }

		//'private'
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}

	public class FeedBackKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.moccml.mapping.xtext.Ecl.FeedBackKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForceForceKeyword_0_0 = (Keyword)cForceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cForbidEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cForbidForbidKeyword_1_0 = (Keyword)cForbidEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FeedBackKind:
		//	force | // start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
		//	forbid;
		public EnumRule getRule() { return rule; }

		//force | // start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
		//forbid
		public Alternatives getAlternatives() { return cAlternatives; }

		//force
		public EnumLiteralDeclaration getForceEnumLiteralDeclaration_0() { return cForceEnumLiteralDeclaration_0; }

		//'force'
		public Keyword getForceForceKeyword_0_0() { return cForceForceKeyword_0_0; }

		//// start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
		//forbid
		public EnumLiteralDeclaration getForbidEnumLiteralDeclaration_1() { return cForbidEnumLiteralDeclaration_1; }

		//'forbid'
		public Keyword getForbidForbidKeyword_1_0() { return cForbidForbidKeyword_1_0; }
	}
	
	private final MoCCMLMappingDocumentElements pMoCCMLMappingDocument;
	private final ImportElements pImport;
	private final TypeExpCSElements pTypeExpCS;
	private final EventTypeElements pEventType;
	private final TimebaseElements pTimebase;
	private final BlockTypeElements pBlockType;
	private final EventKindElements eEventKind;
	private final ExpCSElements pExpCS;
	private final MoCCMLMappingPriorityElements pMoCCMLMappingPriority;
	private final DefCSElements pDefCS;
	private final VisibilityElements eVisibility;
	private final MoCCMLMappingBlockDefCSElements pMoCCMLMappingBlockDefCS;
	private final MoCCMLMappingEventDefCSElements pMoCCMLMappingEventDefCS;
	private final DSAFeedBackRuleElements pDSAFeedBackRule;
	private final CasesRuleElements pCasesRule;
	private final FeedBackKindElements eFeedBackKind;
	private final MoCCMLExpressionElements pMoCCMLExpression;
	private final MoCCMLRelationElements pMoCCMLRelation;
	
	private final Grammar grammar;

	private final CompleteOCLGrammarAccess gaCompleteOCL;

	private final EssentialOCLGrammarAccess gaEssentialOCL;

	private final BaseGrammarAccess gaBase;

	@Inject
	public EclGrammarAccess(GrammarProvider grammarProvider,
		CompleteOCLGrammarAccess gaCompleteOCL,
		EssentialOCLGrammarAccess gaEssentialOCL,
		BaseGrammarAccess gaBase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCompleteOCL = gaCompleteOCL;
		this.gaEssentialOCL = gaEssentialOCL;
		this.gaBase = gaBase;
		this.pMoCCMLMappingDocument = new MoCCMLMappingDocumentElements();
		this.pImport = new ImportElements();
		this.pTypeExpCS = new TypeExpCSElements();
		this.pEventType = new EventTypeElements();
		this.pTimebase = new TimebaseElements();
		this.pBlockType = new BlockTypeElements();
		this.eEventKind = new EventKindElements();
		this.pExpCS = new ExpCSElements();
		this.pMoCCMLMappingPriority = new MoCCMLMappingPriorityElements();
		this.pDefCS = new DefCSElements();
		this.eVisibility = new VisibilityElements();
		this.pMoCCMLMappingBlockDefCS = new MoCCMLMappingBlockDefCSElements();
		this.pMoCCMLMappingEventDefCS = new MoCCMLMappingEventDefCSElements();
		this.pDSAFeedBackRule = new DSAFeedBackRuleElements();
		this.pCasesRule = new CasesRuleElements();
		this.eFeedBackKind = new FeedBackKindElements();
		this.pMoCCMLExpression = new MoCCMLExpressionElements();
		this.pMoCCMLRelation = new MoCCMLRelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gemoc.moccml.mapping.xtext.Ecl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CompleteOCLGrammarAccess getCompleteOCLGrammarAccess() {
		return gaCompleteOCL;
	}

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}

	
	////import  "http://org.eclipse.gemoc.moccml.mapping"  
	////import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation"  as CCSL
	//MoCCMLMappingDocument:
	//	{MoCCMLMappingDocument} ownedImports+=ImportCS*
	//	imports+=Import* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*;
	public MoCCMLMappingDocumentElements getMoCCMLMappingDocumentAccess() {
		return pMoCCMLMappingDocument;
	}
	
	public ParserRule getMoCCMLMappingDocumentRule() {
		return getMoCCMLMappingDocumentAccess().getRule();
	}

	//Import ImportStatement:
	//	"ECLimport" importURI=DOUBLE_QUOTED_STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//@Override
	//TypeExpCS baseCST::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS | EventType | BlockType | Timebase)
	//	ownedMultiplicity=MultiplicityCS?;
	public TypeExpCSElements getTypeExpCSAccess() {
		return pTypeExpCS;
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	//EventType:
	//	{EventType}
	//	'Event' ('(' referedElement=EventKind ')')?;
	public EventTypeElements getEventTypeAccess() {
		return pEventType;
	}
	
	public ParserRule getEventTypeRule() {
		return getEventTypeAccess().getRule();
	}

	//Timebase MoCCMLMappingTimeBase:
	//	{MoCCMLMappingTimeBase}
	//	'TimeBase' ('[' timeBase=[CCSLBasicTypes::DenseClockType] ']')?;
	public TimebaseElements getTimebaseAccess() {
		return pTimebase;
	}
	
	public ParserRule getTimebaseRule() {
		return getTimebaseAccess().getRule();
	}

	//BlockType:
	//	{BlockType}
	//	'Block';
	public BlockTypeElements getBlockTypeAccess() {
		return pBlockType;
	}
	
	public ParserRule getBlockTypeRule() {
		return getBlockTypeAccess().getRule();
	}

	//enum EventKind:
	//	start='StartEvent' | // start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
	//	finish='StopEvent' | //finish= 'stop Event' | finish= 'stopEvent' |finish= 'Stop Event' |
	//	finish='FinishEvent' | //| finish= 'finish Event' | finish= 'finishEvent' | finish= 'Finish Event' |
	//	consume="ConsumeEvent" |
	//	produce="produceEvent" |
	//	receive="receiveEvent" |
	//	send="sendEvent" |
	//	create="CreateEvent" |
	//	destroy="DestroyEvent" |
	//	suspend="SuspendEvent" |
	//	resume="ResumeEvent" |
	//	undefined="DSE" | undefined="internalMoCCEvent" | undefined="any" | undefined="GenericEvent" |
	//	undefined="ExecuteEvent" |
	//	call="CallEvent";
	public EventKindElements getEventKindAccess() {
		return eEventKind;
	}
	
	public EnumRule getEventKindRule() {
		return getEventKindAccess().getRule();
	}

	//@Override
	//ExpCS essentialOCLCST::ExpCS:
	//	MoCCMLRelation | MoCCMLExpression | MoCCMLMappingPriority | (PrefixedPrimaryExpCS
	//	({essentialOCLCST::InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS);
	public ExpCSElements getExpCSAccess() {
		return pExpCS;
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	//MoCCMLMappingPriority:
	//	{MoCCMLMappingPriority}
	//	'Prior' ':' higher=ExpCS 'prevails' 'on' lower=ExpCS;
	public MoCCMLMappingPriorityElements getMoCCMLMappingPriorityAccess() {
		return pMoCCMLMappingPriority;
	}
	
	public ParserRule getMoCCMLMappingPriorityRule() {
		return getMoCCMLMappingPriorityAccess().getRule();
	}

	//@Override
	//DefCS completeOCL::DefCS:
	//	DefOperationCS | DefPropertyCS | MoCCMLMappingEventDefCS | MoCCMLMappingBlockDefCS;
	public DefCSElements getDefCSAccess() {
		return pDefCS;
	}
	
	public ParserRule getDefCSRule() {
		return getDefCSAccess().getRule();
	}

	//enum Visibility:
	//	public |
	//	private;
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//MoCCMLMappingBlockDefCS:
	//	visibility=Visibility? 'blockDef' ('if' condition=ExpCS)? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
	//	'=' ownedSpecification=SpecificationCS ("enter" "when" enterWhen=ExpCS)? ("leave" "when" leaveWhen=ExpCS)?;
	public MoCCMLMappingBlockDefCSElements getMoCCMLMappingBlockDefCSAccess() {
		return pMoCCMLMappingBlockDefCS;
	}
	
	public ParserRule getMoCCMLMappingBlockDefCSRule() {
		return getMoCCMLMappingBlockDefCSAccess().getRule();
	}

	//MoCCMLMappingEventDefCS:
	//	visibility=Visibility? 'def' ('if' condition=ExpCS)? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
	//	'=' ownedSpecification=SpecificationCS (('[' dsaResultName=UnrestrictedName ']')? ("future" "(" future=ExpCS ")")?
	//	("switch" feedback=DSAFeedBackRule)?);
	public MoCCMLMappingEventDefCSElements getMoCCMLMappingEventDefCSAccess() {
		return pMoCCMLMappingEventDefCS;
	}
	
	public ParserRule getMoCCMLMappingEventDefCSRule() {
		return getMoCCMLMappingEventDefCSAccess().getRule();
	}

	//DSAFeedBackRule DSAFeedback:
	//	cases+=CasesRule+;
	public DSAFeedBackRuleElements getDSAFeedBackRuleAccess() {
		return pDSAFeedBackRule;
	}
	
	public ParserRule getDSAFeedBackRuleRule() {
		return getDSAFeedBackRuleAccess().getRule();
	}

	//CasesRule Case:
	//	'case' condition=ExpCS kindOfFeedback=FeedBackKind eventToForce=ExpCS (('until' | 'when' | 'on') on=ExpCS)? ';';
	public CasesRuleElements getCasesRuleAccess() {
		return pCasesRule;
	}
	
	public ParserRule getCasesRuleRule() {
		return getCasesRuleAccess().getRule();
	}

	//enum FeedBackKind:
	//	force | // start= 'start Event' | start= 'startEvent' |start= 'Start Event' |
	//	forbid;
	public FeedBackKindElements getFeedBackKindAccess() {
		return eFeedBackKind;
	}
	
	public EnumRule getFeedBackKindRule() {
		return getFeedBackKindAccess().getRule();
	}

	//MoCCMLExpression:
	//	{MoCCMLExpression}
	//	//we need to add a keyWord to make the EclScopeProvider working :-/
	//	"Expression" type=[CCSL::ExpressionDeclaration] '(' parameters+=ExpCS (',' parameters+=ExpCS)* ')';
	public MoCCMLExpressionElements getMoCCMLExpressionAccess() {
		return pMoCCMLExpression;
	}
	
	public ParserRule getMoCCMLExpressionRule() {
		return getMoCCMLExpressionAccess().getRule();
	}

	//MoCCMLRelation:
	//	{MoCCMLRelation}
	//	//we need to add a keyWord to make the EclScopeProvider working :-/
	//	"Relation" type=[CCSL::RelationDeclaration] '(' parameters+=ExpCS (',' parameters+=ExpCS)* ')';
	public MoCCMLRelationElements getMoCCMLRelationAccess() {
		return pMoCCMLRelation;
	}
	
	public ParserRule getMoCCMLRelationRule() {
		return getMoCCMLRelationAccess().getRule();
	}

	///*
	// * A Complete OCL document comprises
	// * bullet[model imports for referenced and complemented models]
	// * bullet[includes for additional Complete OCL documents]
	// * bullet[libraries to augment or override the OCL Standard Library]
	// * bullet[package declarations for package-grouped declarations]
	// * bullet[context declarations for independent declarations]
	// */ CompleteOCLDocumentCS:
	//	ownedImports+=ImportCS* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*;
	public CompleteOCLGrammarAccess.CompleteOCLDocumentCSElements getCompleteOCLDocumentCSAccess() {
		return gaCompleteOCL.getCompleteOCLDocumentCSAccess();
	}
	
	public ParserRule getCompleteOCLDocumentCSRule() {
		return getCompleteOCLDocumentCSAccess().getRule();
	}

	//terminal UNQUOTED_STRING: // Never forward parsed; just provides a placeholder
	//	'£$%^£$%^' //  for reverse serialisation of embedded OCL 
	//;
	public TerminalRule getUNQUOTED_STRINGRule() {
		return gaCompleteOCL.getUNQUOTED_STRINGRule();
	} 

	//CompleteOCLNavigationOperatorName:
	//	'^' | '^^';
	public CompleteOCLGrammarAccess.CompleteOCLNavigationOperatorNameElements getCompleteOCLNavigationOperatorNameAccess() {
		return gaCompleteOCL.getCompleteOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getCompleteOCLNavigationOperatorNameRule() {
		return getCompleteOCLNavigationOperatorNameAccess().getRule();
	}

	//ClassifierContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? selfName=UnrestrictedName?
	//	ownedPathName=PathNameCS ('inv' ownedInvariants+=ConstraintCS | ownedDefinitions+=super::DefCS)+;
	public CompleteOCLGrammarAccess.ClassifierContextDeclCSElements getClassifierContextDeclCSAccess() {
		return gaCompleteOCL.getClassifierContextDeclCSAccess();
	}
	
	public ParserRule getClassifierContextDeclCSRule() {
		return getClassifierContextDeclCSAccess().getRule();
	}

	///*
	// * A Constraint such as 
	// * 
	// * oclText[IsNull('should be null') : self = null]
	// * 
	// * comprises at least the OCL specification of the constraint. The constraint may
	// * additionally have a name which may be followed by a parenthesized expression defining an OCL
	// * expression to be evaluated to provide an error message.
	// */ ConstraintCS base::ConstraintCS:
	//	(name=UnrestrictedName ('(' ownedMessageSpecification=SpecificationCS ')')?)? ':' ownedSpecification=SpecificationCS;
	public CompleteOCLGrammarAccess.ConstraintCSElements getConstraintCSAccess() {
		return gaCompleteOCL.getConstraintCSAccess();
	}
	
	public ParserRule getConstraintCSRule() {
		return getConstraintCSAccess().getRule();
	}

	///*
	// * A Context declaration can be a Classifier, Operation of Property Context declaration.
	// */ ContextDeclCS:
	//	PropertyContextDeclCS
	//	| ClassifierContextDeclCS
	//	| OperationContextDeclCS;
	public CompleteOCLGrammarAccess.ContextDeclCSElements getContextDeclCSAccess() {
		return gaCompleteOCL.getContextDeclCSAccess();
	}
	
	public ParserRule getContextDeclCSRule() {
		return getContextDeclCSAccess().getRule();
	}

	///*
	// * An operation definition provides an additional operation for its classifier context.
	// * 
	// * oclText[static def redundantName: isEven(i : Integer) : Boolean = i mod 2 = 0]
	// * 
	// * comprises at least an operation name, return type and an OCL expression that evaluates the operation value.
	// * The operation may have parameters and may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// */ DefOperationCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' ownedSignature=TemplateSignatureCS?
	//	name=UnrestrictedName '(' (ownedParameters+=DefParameterCS (',' ownedParameters+=DefParameterCS)*)? ')' ':'
	//	ownedType=super::TypeExpCS?
	//	'=' ownedSpecification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefOperationCSElements getDefOperationCSAccess() {
		return gaCompleteOCL.getDefOperationCSAccess();
	}
	
	public ParserRule getDefOperationCSRule() {
		return getDefOperationCSAccess().getRule();
	}

	//DefParameterCS base::ParameterCS:
	//	name=UnrestrictedName ':' ownedType=super::TypeExpCS;
	public CompleteOCLGrammarAccess.DefParameterCSElements getDefParameterCSAccess() {
		return gaCompleteOCL.getDefParameterCSAccess();
	}
	
	public ParserRule getDefParameterCSRule() {
		return getDefParameterCSAccess().getRule();
	}

	///*
	// * A property definition provides an additional property for its classifier context.
	// * 
	// * oclText[static def redundantName: upperCaseName : Boolean = name.toUpperCase()]
	// * 
	// * comprises at least a property name, type and an OCL expression that evaluates the property value.
	// * The property may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// */ DefPropertyCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' name=UnrestrictedName ':' ownedType=super::TypeExpCS
	//	'=' ownedSpecification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefPropertyCSElements getDefPropertyCSAccess() {
		return gaCompleteOCL.getDefPropertyCSAccess();
	}
	
	public ParserRule getDefPropertyCSRule() {
		return getDefPropertyCSAccess().getRule();
	}

	//ImportCS base::ImportCS:
	//	('import' | 'include' | 'library') (name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?;
	public CompleteOCLGrammarAccess.ImportCSElements getImportCSAccess() {
		return gaCompleteOCL.getImportCSAccess();
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	///*
	// * An operation context declaration complements an existing operation with additional details.
	// * 
	// * oclText[context (T) Stack::pop() : T]
	// * oclText[pre NotEmptyPop: size() > 0]
	// * oclText[post: size()@pre = size() + 1]
	// * 
	// * The operation declaration comprises at least an operation name, which must be qualified with at least a
	// * class name. If used outside a package declaration, package name qualification is also needed. 
	// * If the return type is omitted OclVoid is used.
	// * The operation may also have operation parameters and template parameters.
	// * The declaration may be followed by any number of preconditions,
	// * and/or postconditions. It may also be followed by a body expression that defines the evaluation. 
	// * 
	// * For compatibility with invariants the body expression may have a name that is never used.
	// */ OperationContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? ownedPathName=PathNameCS
	//	'(' (ownedParameters+=ParameterCS (',' ownedParameters+=ParameterCS)*)? ')' ':' ownedType=super::TypeExpCS? ('pre'
	//	ownedPreconditions+=ConstraintCS | 'post' ownedPostconditions+=ConstraintCS | 'body' UnrestrictedName? ':'
	//	ownedBodies+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.OperationContextDeclCSElements getOperationContextDeclCSAccess() {
		return gaCompleteOCL.getOperationContextDeclCSAccess();
	}
	
	public ParserRule getOperationContextDeclCSRule() {
		return getOperationContextDeclCSAccess().getRule();
	}

	//PackageDeclarationCS:
	//	'package' ownedPathName=PathNameCS ('inv' ownedInvariants+=ConstraintCS)* ownedContexts+=ContextDeclCS* 'endpackage';
	public CompleteOCLGrammarAccess.PackageDeclarationCSElements getPackageDeclarationCSAccess() {
		return gaCompleteOCL.getPackageDeclarationCSAccess();
	}
	
	public ParserRule getPackageDeclarationCSRule() {
		return getPackageDeclarationCSAccess().getRule();
	}

	//ParameterCS base::ParameterCS:
	//	(name=UnrestrictedName ':')? ownedType=super::TypeExpCS;
	public CompleteOCLGrammarAccess.ParameterCSElements getParameterCSAccess() {
		return gaCompleteOCL.getParameterCSAccess();
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}

	///*
	// * A property context declaration complements an existing property with additional details.
	// * 
	// * oclText[context (T) Stack::isEmpty : Boolean]
	// * oclText[derive IsEmpty: size() = 0]
	// * 
	// * The property declaration comprises at least a property name and type.
	// * The type must be qualified with at least a class name.
	// * If used outside a package declaration, package name qualification is also needed. 
	// * The declaration may be followed by a derive constraint and/or an init expression.
	// * 
	// * A derive constraint provides an alternate mechanism for defining a class invariant;
	// * the only difference is that the property is identified as a constrainedElement. As an
	// * invariant the constraint provides an OCL expression that should always be true.
	// * 
	// * For a non-derived property, an init expression defines the value to be assigned to the property
	// * when its containing object is first created. 
	// * 
	// * For a derived property, an init expression defines the evaluation of the property, which
	// * may vary from access to access even for read-only properties.
	// * 
	// * NB. RoyalAndLoyal gratuitously names its derived values.
	// */ PropertyContextDeclCS:
	//	'context' ownedPathName=PathNameCS ':' ownedType=super::TypeExpCS ('derive' UnrestrictedName? ':'
	//	ownedDefaultExpressions+=SpecificationCS | 'init' UnrestrictedName? ':' ownedDefaultExpressions+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.PropertyContextDeclCSElements getPropertyContextDeclCSAccess() {
		return gaCompleteOCL.getPropertyContextDeclCSAccess();
	}
	
	public ParserRule getPropertyContextDeclCSRule() {
		return getPropertyContextDeclCSAccess().getRule();
	}

	//SpecificationCS essentialocl::ExpSpecificationCS:
	//	ownedExpression=super::ExpCS | exprString=UNQUOTED_STRING;
	public CompleteOCLGrammarAccess.SpecificationCSElements getSpecificationCSAccess() {
		return gaCompleteOCL.getSpecificationCSAccess();
	}
	
	public ParserRule getSpecificationCSRule() {
		return getSpecificationCSAccess().getRule();
	}

	////---------------------------------------------------------------------------------
	////	Base overrides
	////---------------------------------------------------------------------------------
	//TemplateSignatureCS base::TemplateSignatureCS:
	//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')' | '<'
	//	ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* '>';
	public CompleteOCLGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaCompleteOCL.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}

	//TypedRefCS base::TypedRefCS:
	//	TypeLiteralCS | TypedTypeRefCS;
	public CompleteOCLGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaCompleteOCL.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}

	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName
	//	//| 'body'
	//	//| 'context'
	//	//| 'def'
	//	//| 'derive'
	//	//|	'endpackage'
	//	| 'import'
	//	| 'include'
	//	//| 'init'
	//	//| 'inv'
	//	| 'library'
	//	//|	'package'
	//	//|	'post'
	//	//|	'pre'
	//	//|	'static'
	//;
	public CompleteOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaCompleteOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	////---------------------------------------------------------------------------------
	////	EssentialOCL overrides
	////---------------------------------------------------------------------------------
	//NavigatingArgExpCS essentialocl::ExpCS:
	//	{OCLMessageArgCS} '?' | super::ExpCS;
	public CompleteOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaCompleteOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName | CompleteOCLNavigationOperatorName;
	public CompleteOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaCompleteOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}

	//PrimitiveTypeIdentifier:
	//	'Boolean'
	//	| 'Integer'
	//	| 'Real'
	//	| 'String'
	//	| 'UnlimitedNatural'
	//	| 'OclAny'
	//	| 'OclInvalid'
	//	| 'OclMessage'
	//	| 'OclState'
	//	| 'OclVoid';
	public CompleteOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaCompleteOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	//Model ContextCS:
	//	ownedExpression=super::ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLReservedKeyword:
	//	'and'
	//	| 'and2'
	//	| 'else'
	//	| 'endif'
	//	| 'if'
	//	| 'implies'
	//	| 'implies2'
	//	| 'in'
	//	| 'let'
	//	| 'not'
	//	| 'not2'
	//	| 'or'
	//	| 'or2'
	//	| 'then'
	//	| 'xor'
	//	| 'xor2';
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLUnaryOperatorName:
	//	'-' | 'not' | 'not2';
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}

	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLInfixOperatorName:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'and2' | 'implies' | 'implies2' | 'or' | 'or2'
	//	| 'xor' | 'xor2';
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}

	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLNavigationOperatorName:
	//	'.' | '->' | '?.' | '?->';
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}

	//BinaryOperatorName:
	//	InfixOperatorName | super::NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaEssentialOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}

	//InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaEssentialOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}

	//UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaEssentialOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Names
	////---------------------------------------------------------------------
	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLUnrestrictedName:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	///** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> */
	//EssentialOCLUnreservedName:
	//	super::UnrestrictedName
	//	| CollectionTypeIdentifier
	//	| super::PrimitiveTypeIdentifier
	//	| 'Map'
	//	| 'Tuple';
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//URIPathNameCS base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS base::PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnrestrictedName] | {base::PathElementWithURICS}
	//	referredElement=[pivot::Namespace|URI];
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	//SimplePathNameCS base::PathNameCS:
	//	ownedPathElements+=FirstPathElementCS;
	public EssentialOCLGrammarAccess.SimplePathNameCSElements getSimplePathNameCSAccess() {
		return gaEssentialOCL.getSimplePathNameCSAccess();
	}
	
	public ParserRule getSimplePathNameCSRule() {
		return getSimplePathNameCSAccess().getRule();
	}

	//PrimitiveTypeCS base::PrimitiveTypeRefCS:
	//	name=super::PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier:
	//	'Set'
	//	| 'Bag'
	//	| 'Sequence'
	//	| 'Collection'
	//	| 'OrderedSet';
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpWithoutMultiplicityCS ownedCollectionMultiplicity=MultiplicityCS?
	//	')')?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MapTypeCS:
	//	name='Map' ('(' ownedKeyType=super::TypeExpCS ',' ownedValueType=super::TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaEssentialOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}

	//TupleTypeCS base::TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=TuplePartCS (',' ownedParts+=TuplePartCS)*)? ')')?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS base::TuplePartCS:
	//	name=super::UnrestrictedName ':' ownedType=super::TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Literals
	////---------------------------------------------------------------------
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	ownedExpression=super::ExpCS ('..' ownedLastExpression=super::ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=PatternExpCS (',' ownedParts+=PatternExpCS)* ('++' restVariableName=Identifier))?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaEssentialOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}

	//ShadowPartCS:
	//	referredProperty=[pivot::Property|super::UnrestrictedName] '=' ownedInitExpression=(super::ExpCS | PatternExpCS) |
	//	ownedInitExpression=StringLiteralExpCS;
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaEssentialOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}

	//PatternExpCS:
	//	patternVariableName=super::UnrestrictedName? ':' ownedPatternType=super::TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaEssentialOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}

	//LambdaLiteralExpCS:
	//	'Lambda' '{' ownedExpressionCS=super::ExpCS '}';
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaEssentialOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}

	//MapLiteralExpCS:
	//	ownedType=MapTypeCS '{' (ownedParts+=MapLiteralPartCS (',' ownedParts+=MapLiteralPartCS)*)? '}';
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaEssentialOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}

	//MapLiteralPartCS:
	//	ownedKey=super::ExpCS '<-' ownedValue=super::ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaEssentialOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS
	//	| StringLiteralExpCS
	//	| BooleanLiteralExpCS
	//	| UnlimitedNaturalLiteralExpCS
	//	| InvalidLiteralExpCS
	//	| NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}';
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=super::UnrestrictedName (':' ownedType=super::TypeExpCS)? '=' ownedInitExpression=super::ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	symbol='true'
	//	| symbol='false';
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralCS base::TypedRefCS:
	//	PrimitiveTypeCS
	//	| CollectionTypeCS
	//	| MapTypeCS
	//	| TupleTypeCS;
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ('{' ownedPatternGuard=super::ExpCS
	//	'}')?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpWithoutMultiplicityCS base::TypedRefCS:
	//	TypeNameExpCS | TypeLiteralCS | CollectionPatternCS;
	public EssentialOCLGrammarAccess.TypeExpWithoutMultiplicityCSElements getTypeExpWithoutMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeExpWithoutMultiplicityCSAccess();
	}
	
	public ParserRule getTypeExpWithoutMultiplicityCSRule() {
		return getTypeExpWithoutMultiplicityCSAccess().getRule();
	}

	///* A prefixed let expression elaborates a let expression with zero or more unary prefix operators. */ PrefixedLetExpCS
	//ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS;
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaEssentialOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}

	///* A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. */
	//PrefixedPrimaryExpCS ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}

	///* A primary expression identifies the basic expressions from which more complex expressions may be constructed. */
	//PrimaryExpCS ExpCS:
	//	NestedExpCS
	//	| IfExpCS
	//	| SelfExpCS
	//	| PrimitiveLiteralExpCS
	//	| TupleLiteralExpCS
	//	| MapLiteralExpCS
	//	| CollectionLiteralExpCS
	//	| LambdaLiteralExpCS
	//	| TypeLiteralExpCS
	//	| NameExpCS;
	public EssentialOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	///* A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.*/ NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?='@'
	//	'pre')?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	///* A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.*/
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} '{' (ownedParts+=ShadowPartCS (',' ownedParts+=ShadowPartCS)*)? '}';
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaEssentialOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}

	///* A curly bracket clause is a generalized rule for template specialisations and operations arguments.*/
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} '(' (ownedArguments+=NavigatingArgCS ownedArguments+=(NavigatingCommaArgCS |
	//	NavigatingSemiArgCS | NavigatingBarArgCS)*)? ')';
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaEssentialOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}

	///* A square bracket clause is a generalized rule for association class qualifiers and roles.*/ SquareBracketedClauseCS:
	//	'[' ownedTerms+=super::ExpCS (',' ownedTerms+=super::ExpCS)* ']';
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaEssentialOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}

	///* A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. */ NavigatingArgCS:
	//	ownedNameExpression=super::NavigatingArgExpCS ('<-' ownedCoIterator=CoIteratorVariableCS ('='
	//	ownedInitExpression=super::ExpCS)? | ':' ownedType=super::TypeExpCS ('<-' ownedCoIterator=CoIteratorVariableCS)? ('='
	//	ownedInitExpression=super::ExpCS)? | (':' ownedType=super::TypeExpCS)? ('<-' ownedCoIterator=CoIteratorVariableCS)?
	//	'in' ownedInitExpression=super::ExpCS)?
	//	| ':' ownedType=super::TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	///* A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. */
	//NavigatingBarArgCS NavigatingArgCS:
	//	prefix='|' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=super::TypeExpCS ('='
	//	ownedInitExpression=super::ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	///* A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. */ NavigatingCommaArgCS NavigatingArgCS:
	//	prefix=',' ownedNameExpression=super::NavigatingArgExpCS ('<-' ownedCoIterator=CoIteratorVariableCS ('='
	//	ownedInitExpression=super::ExpCS)? | ':' ownedType=super::TypeExpCS ('<-' ownedCoIterator=CoIteratorVariableCS)? ('='
	//	ownedInitExpression=super::ExpCS)? | (':' ownedType=super::TypeExpCS)? ('<-' ownedCoIterator=CoIteratorVariableCS)?
	//	'in' ownedInitExpression=super::ExpCS)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	///* A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. */
	//NavigatingSemiArgCS NavigatingArgCS:
	//	prefix=';' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=super::TypeExpCS ('='
	//	ownedInitExpression=super::ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//CoIteratorVariableCS VariableCS:
	//	name=super::UnrestrictedName (':' ownedType=super::TypeExpCS)?;
	public EssentialOCLGrammarAccess.CoIteratorVariableCSElements getCoIteratorVariableCSAccess() {
		return gaEssentialOCL.getCoIteratorVariableCSAccess();
	}
	
	public ParserRule getCoIteratorVariableCSRule() {
		return getCoIteratorVariableCSAccess().getRule();
	}

	//IfExpCS:
	//	'if' ownedCondition=(super::ExpCS | PatternExpCS)
	//	'then' ownedThenExpression=super::ExpCS
	//	//	ifThenExpressions+=IfThenExpCS
	//	ownedIfThenExpressions+=ElseIfThenExpCS*
	//	'else' ownedElseExpression=super::ExpCS
	//	'endif';
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	////IfThenExpCS returns IfThenExpCS:
	////	'if' condition=ExpCS
	////	'then' thenExpression=ExpCS
	////;
	//ElseIfThenExpCS IfThenExpCS:
	//	'elseif' ownedCondition=super::ExpCS
	//	'then' ownedThenExpression=super::ExpCS;
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaEssentialOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}

	//LetExpCS:
	//	'let' ownedVariables+=LetVariableCS (',' ownedVariables+=LetVariableCS)*
	//	'in' ownedInExpression=super::ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=super::UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (':' ownedType=super::TypeExpCS)? '='
	//	ownedInitExpression=super::ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	'(' ownedExpression=super::ExpCS ')';
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}

	//MultiplicityBoundsCS:
	//	lowerBound=LOWER ('..' upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaBase.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityCS:
	//	'[' (MultiplicityBoundsCS | MultiplicityStringCS) ('|?' | isNullFree?='|1')? ']';
	public BaseGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaBase.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//MultiplicityStringCS:
	//	stringBounds=('*' | '+' | '?');
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaBase.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaBase.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnrestrictedName];
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaBase.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnreservedName];
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaBase.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS (',' ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaBase.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}

	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaBase.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}

	//TypeParameterCS:
	//	name=super::UnrestrictedName ('extends' ownedExtends+=super::TypedRefCS ('&&' ownedExtends+=super::TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaBase.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}

	//TypeRefCS:
	//	super::TypedRefCS | WildcardTypeRefCS;
	public BaseGrammarAccess.TypeRefCSElements getTypeRefCSAccess() {
		return gaBase.getTypeRefCSAccess();
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}

	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ('(' ownedBinding=TemplateBindingCS ')')?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaBase.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}

	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} '?' ('extends' ownedExtends=super::TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaBase.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaBase.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaBase.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	///* A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. */
	//LOWER ecore::EInt:
	//	INT;
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaBase.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	///* A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// */ NUMBER_LITERAL BigNumber:
	//	INT;
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaBase.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	///* An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. */
	//UPPER ecore::EInt:
	//	INT | '*';
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaBase.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaBase.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaBase.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaBase.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//	'"' (ESCAPED_CHARACTER | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaBase.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"'" (ESCAPED_CHARACTER | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaBase.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaBase.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaBase.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaBase.getESCAPED_IDRule();
	} 

	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaBase.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaBase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaBase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaBase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBase.getANY_OTHERRule();
	} 
}
