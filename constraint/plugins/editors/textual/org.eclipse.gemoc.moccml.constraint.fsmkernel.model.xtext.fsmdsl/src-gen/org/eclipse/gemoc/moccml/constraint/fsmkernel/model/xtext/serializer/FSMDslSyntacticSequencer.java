/*
 * generated by Xtext 2.31.0
 */
package org.eclipse.gemoc.moccml.constraint.fsmkernel.model.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gemoc.moccml.constraint.fsmkernel.model.xtext.services.FSMDslGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class FSMDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected FSMDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BooleanElement_EStringParserRuleCall_2_1_q;
	protected AbstractElementAlias match_ExternalExpressionDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1;
	protected AbstractElementAlias match_ExternalRelationDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1;
	protected AbstractElementAlias match_Library___ImportsKeyword_3_0_0_LeftCurlyBracketKeyword_3_0_1_RightCurlyBracketKeyword_3_0_3__q;
	protected AbstractElementAlias match_Relation_RightSquareBracketKeyword_4_q;
	protected AbstractElementAlias match_SequenceElement_SemicolonKeyword_5_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (FSMDslGrammarAccess) access;
		match_BooleanElement_EStringParserRuleCall_2_1_q = new TokenAlias(false, true, grammarAccess.getBooleanElementAccess().getEStringParserRuleCall_2_1());
		match_ExternalExpressionDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExternalExpressionDefinitionAccess().getExternKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getExternalExpressionDefinitionAccess().getExternalKeyword_0_1()));
		match_ExternalRelationDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getExternalRelationDefinitionAccess().getExternKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getExternalRelationDefinitionAccess().getExternalKeyword_0_1()));
		match_Library___ImportsKeyword_3_0_0_LeftCurlyBracketKeyword_3_0_1_RightCurlyBracketKeyword_3_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLibraryAccess().getImportsKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getLibraryAccess().getLeftCurlyBracketKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getLibraryAccess().getRightCurlyBracketKeyword_3_0_3()));
		match_Relation_RightSquareBracketKeyword_4_q = new TokenAlias(false, true, grammarAccess.getRelationAccess().getRightSquareBracketKeyword_4());
		match_SequenceElement_SemicolonKeyword_5_2_q = new TokenAlias(false, true, grammarAccess.getSequenceElementAccess().getSemicolonKeyword_5_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EString returns ecore::EString:
	 * 	STRING | ID;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BooleanElement_EStringParserRuleCall_2_1_q.equals(syntax))
				emit_BooleanElement_EStringParserRuleCall_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExternalExpressionDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1.equals(syntax))
				emit_ExternalExpressionDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExternalRelationDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1.equals(syntax))
				emit_ExternalRelationDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Library___ImportsKeyword_3_0_0_LeftCurlyBracketKeyword_3_0_1_RightCurlyBracketKeyword_3_0_3__q.equals(syntax))
				emit_Library___ImportsKeyword_3_0_0_LeftCurlyBracketKeyword_3_0_1_RightCurlyBracketKeyword_3_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Relation_RightSquareBracketKeyword_4_q.equals(syntax))
				emit_Relation_RightSquareBracketKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SequenceElement_SemicolonKeyword_5_2_q.equals(syntax))
				emit_SequenceElement_SemicolonKeyword_5_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EString?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '=' value=Boolean0
	 
	 * </pre>
	 */
	protected void emit_BooleanElement_EStringParserRuleCall_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Extern' | 'External'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'ExpressionDefinition' name=ID
	 
	 * </pre>
	 */
	protected void emit_ExternalExpressionDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Extern' | 'External'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'RelationDefinition' name=ID
	 
	 * </pre>
	 */
	protected void emit_ExternalRelationDefinition_ExternKeyword_0_0_or_ExternalKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('imports' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) '}' (rule end)
	 *     name=ID '{' (ambiguity) expressionLibraries+=ExpressionLibrary
	 *     name=ID '{' (ambiguity) predefinedTypes+=Type
	 *     name=ID '{' (ambiguity) relationLibraries+=RelationLibrary
	 
	 * </pre>
	 */
	protected void emit_Library___ImportsKeyword_3_0_0_LeftCurlyBracketKeyword_3_0_1_RightCurlyBracketKeyword_3_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ']'?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=[RelationDeclaration|EString] (ambiguity) '(' ')' (rule end)
	 *     type=[RelationDeclaration|EString] (ambiguity) '(' bindings+=Binding
	 
	 * </pre>
	 */
	protected void emit_Relation_RightSquareBracketKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     finitePart+=PrimitiveElement (ambiguity) '(' nonFinitePart+=PrimitiveElement
	 *     finitePart+=PrimitiveElement (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_SequenceElement_SemicolonKeyword_5_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
