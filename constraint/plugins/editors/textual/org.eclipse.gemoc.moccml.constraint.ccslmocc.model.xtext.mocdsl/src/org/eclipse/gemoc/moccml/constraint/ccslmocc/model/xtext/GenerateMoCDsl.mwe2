module org.eclipse.gemoc.moccml.constraint.ccslmocc.model.xtext.mocdsl.MoCDsl

import org.eclipse.emf.mwe.utils.*
//import org.eclipse.xtext.generator.*
//import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var grammarURI = "classpath:/org/eclipse/gemoc//moccml/constraint/ccslmocc/model/xtext/MoCDsl.xtext"
var projectName = "org.eclipse.gemoc.moccml.constraint.ccslmocc.model.xtext.mocdsl"
var runtimeProject = "../${projectName}"
var rootPath = ".."
//var generateXtendStub = true

// adapt to the location of Timesquare sources
var timesquareGitPath = "../../../../../../../../gitlab_inria/jdeanton/TimeSquare"


Workflow {
	bean = StandaloneSetup {
		//scanClassPath  = true
		platformUri = "${runtimeProject}/.."
		
		
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.CCSLModelPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.BasicType.BasicTypePackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClassicalExpression.ClassicalExpressionPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClockExpressionAndRelation.KernelExpression.KernelExpressionPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.PrimitivesTypeValue.PrimitivesTypeValuePackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.TimeModelPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClockExpressionAndRelation.ClockExpressionAndRelationPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClockExpressionAndRelation.KernelRelation.KernelRelationPackage"
	
		registerGeneratedEPackage = "org.eclipse.gemoc.moccml.constraint.fsmkernel.model.FSMModel.FSMModelPackage"
	    
		
		registerGeneratedEPackage = "org.eclipse.gemoc.moccml.constraint.ccslmoc.model.moccml.moccml.CcslmoccPackage"
		
		registerGenModelFile = "${timesquareGitPath}/core/ccslkernel/model/fr.inria.aoste.timesquare.ccslkernel.model/model/TimeModel.genmodel"
		registerGenModelFile = "../../../AS/org.eclipse.gemoc.moccml.constraint.fsmkernel.model/model/FSMModel.genmodel"	    
		registerGenModelFile = "../../../AS/org.eclipse.gemoc.moccml.constraint.ccslmocc.model/model/Ccslmocc.genmodel"
		//registerGenModelFile = "${timesquareGitPath}/core/ccslkernel/model/fr.inria.aoste.timesquare.ccslkernel.model/model/TimeModel.genmodel"	    
		//registerGenModelFile = "platform:/resource/org.eclipse.gemoc.mocc.ccslmocc.model/model/Ccslmocc.genmodel"
		//registerGenModelFile = "platform:/resource/org.eclipse.gemoc.mocc.fsmkernel.model/model/FSMModel.genmodel"
		//registerGenModelFile = "platform:/resource/fr.inria.aoste.timesquare.ccslkernel.model/model/TimeModel.genmodel"
	
		
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = rootPath
				genericIde = {
          			enabled = true
          			
		        }
				
				runtimeTest = {
					enabled = false
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					
					enabled = false
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		language = StandardLanguage {
			name = "org.eclipse.gemoc.moccml.constraint.ccslmocc.model.xtext.MoCDsl"
			fileExtensions = "moccml"
			//referencedResource = "platform:/resource/org.eclipse.gemoc.moccml.constraint.fsmkernel.model/model/FSMModel.genmodel"

			//fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}
			fragment = org.eclipse.xtext.xtext.generator.exporting.SimpleNamesFragment2{}
//			formatter = {
//				generateStub = true
//				generateXtendStub = false
//			}

			scopeProvider = scoping.ImportNamespacesScopingFragment2 {
				generateStub = true
			}
			quickFixProvider = ui.quickfix.QuickfixProviderFragment2 {
				generateStub = true
			}
			outline = ui.outline.OutlineTreeProviderFragment2 {
				generateStub = true
			}
			parserGenerator = parser.antlr.XtextAntlrGeneratorFragment2 {
				options = {
					classSplitting = true
					backtrack = true
				}				
			}
			serializer = {
				generateStub = false
			}
			validator = {
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true				
				generateStub = true
			}
//			generator = {
//				generateStub = true
//			}

			
//			junitSupport = {
//				
//				junitVersion = "5"
//				generateStub = true
//			}
		}
	}
}
//	component = Generator {
//		pathRtProject = runtimeProject
//		pathUiProject = "${runtimeProject}.ui"
//		pathTestProject = "../../../../tests/${projectName}.tests"
//		projectNameRt = projectName
//		projectNameUi = "${projectName}.ui"
//		language = auto-inject {
//			uri = grammarURI
//			fileExtensions = fileExtensions
//			
//
//			// Java API to access grammar elements (required by several other fragments)
//			fragment = grammarAccess.GrammarAccessFragment {}//auto-inject {}
//
//			// generates Java API for the generated EPackages
//			// fragment = ecore.EcoreGeneratorFragment auto-inject {}
//
//			
//			// serializer 2.0
//			//fragment = serializer.SerializerFragment auto-inject {
//				//generateStub = false
//			//}
//
//			// the old serialization component
//			 fragment = parseTreeConstructor.ParseTreeConstructorFragment {}//auto-inject {}
//
//			// a custom ResourceFactory for use with EMF 
//			fragment = resourceFactory.ResourceFactoryFragment {//auto-inject {
//				fileExtensions = fileExtensions
//			}
//
//			// the Antlr parser
//			fragment = parser.antlr.XtextAntlrGeneratorFragment {//auto-inject {
//				options = {
//					classSplitting = true
//					backtrack = true
//				}
//			}
//			
//			// the Ecore2Xtext specific terminal converter
//			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment {}//auto-inject {}
//			
//
//			// Xtend-based API for validation 
//			fragment = validation.JavaValidatorFragment {//auto-inject {
//			 composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//			 composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//			}
//
//			// old scoping and exporting API 
//			// fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
//			// fragment = exporting.QualifiedNamesFragment auto-inject {}
//
//			// scoping and exporting API
//			fragment = scoping.ImportURIScopingFragment {}//auto-inject {}
//			fragment = exporting.SimpleNamesFragment {}//auto-inject {}
//			
//			// generator API
//			//fragment = generator.GeneratorFragment auto-inject {}
//			
//			
//
//			// formatter API 
//			// fragment = formatting.FormatterFragment auto-inject {}
//			fragment = ecore2xtext.FormatterFragment {}//auto-inject {}
//
//			// labeling API 
//			fragment = labeling.LabelProviderFragment {}//auto-inject {}
//
//			// outline API 
//            fragment = outline.OutlineTreeProviderFragment {}//auto-inject {}
//            fragment = outline.QuickOutlineFragment {}//auto-inject {}
//
//			
//			//content assist API 
//			fragment = contentAssist.JavaBasedContentAssistFragment {}//auto-inject {}
//
//			// antlr parser generator tailored for content assist 
//			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {//auto-inject {
//				options = {
//					classSplitting = true
//					backtrack = true
//				}
//			}
//			
//			fragment = builder.BuilderIntegrationFragment {}//auto-inject {}		
//			
//			
//						
//			// generates junit test support classes into Generator#pathTestProject
//			fragment = junit.Junit4Fragment {}//auto-inject {}
//
//			// project wizard (optional) 
//			 fragment = projectWizard.SimpleProjectWizardFragment {//auto-inject {
//					generatorProjectName = "${projectName}.generator" 
//					fileExtension = "moccml"
//			 }
//			 
//			 // quickfix API
//			fragment = quickfix.QuickfixProviderFragment {}//auto-inject {}
//			
//
//			// rename refactoring
//			//fragment = refactoring.RefactorElementNameFragment auto-inject {}
//
//			// provides the necessary bindings for java types integration
//			//fragment = types.TypesGeneratorFragment auto-inject {}
//			
//			// generates the required bindings only if the grammar inherits from Xbase
//			//fragment = xbase.XbaseGeneratorFragment auto-inject {}
//
//			// provides a preference page for template proposals
//			//fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
//
//			// provides a compare view
//            //fragment = compare.CompareFragment auto-inject {}
//		}
//	}

